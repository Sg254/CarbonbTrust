import React, { useState } from 'react';
import { BarChart, Bar, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { Search, TrendingUp, Package, Tag } from 'lucide-react';

const AmazonReviewAnalyzer = () => {
  const [activeTab, setActiveTab] = useState('analysis');

  // Sample Amazon reviews
  const sampleReviews = [
    "The Samsung Galaxy S21 is absolutely amazing! Best phone I've ever owned. Great camera quality.",
    "Disappointed with the Apple AirPods Pro. Sound quality is mediocre and battery life is terrible.",
    "Love my new Nike Air Max shoes! Super comfortable and stylish. Nike never disappoints.",
    "The Sony WH-1000XM4 headphones are fantastic. Excellent noise cancellation and sound quality.",
    "Terrible experience with the Dell XPS 13. Screen flickered constantly and customer service was awful.",
    "The Amazon Echo Dot is perfect for my home. Alexa is very responsive and helpful.",
    "Adidas Ultraboost running shoes exceeded my expectations. Comfortable and durable.",
    "The LG OLED TV has stunning picture quality. Absolutely gorgeous display and great features.",
    "Not impressed with the Microsoft Surface Pro. Overpriced and underpowered for the cost.",
    "The Canon EOS R5 camera is incredible! Professional quality photos and amazing autofocus."
  ];

  // Enhanced NER function
  const extractEntities = (text) => {
    // Brand patterns
    const brandPatterns = [
      'Samsung', 'Apple', 'Nike', 'Sony', 'Dell', 'Amazon', 'Adidas', 
      'LG', 'Microsoft', 'Canon', 'HP', 'Lenovo', 'Google', 'Bose',
      'Asus', 'Acer', 'Panasonic', 'Philips', 'JBL', 'Logitech'
    ];
    
    // Product patterns (multi-word)
    const productPatterns = [
      /Galaxy S\d+/gi,
      /AirPods( Pro)?/gi,
      /Air Max/gi,
      /WH-\d+XM\d+/gi,
      /XPS \d+/gi,
      /Echo Dot/gi,
      /Ultraboost/gi,
      /OLED TV/gi,
      /Surface Pro/gi,
      /EOS R\d+/gi,
      /iPhone \d+( Pro)?/gi,
      /iPad( Pro)?/gi,
      /MacBook( Pro| Air)?/gi,
      /PlayStation \d+/gi,
      /Xbox( Series [XS])?/gi
    ];

    const entities = { brands: [], products: [] };

    // Extract brands
    brandPatterns.forEach(brand => {
      const regex = new RegExp(`\\b${brand}\\b`, 'gi');
      if (regex.test(text)) {
        entities.brands.push(brand);
      }
    });

    // Extract products
    productPatterns.forEach(pattern => {
      const matches = text.match(pattern);
      if (matches) {
        matches.forEach(match => {
          if (!entities.products.includes(match)) {
            entities.products.push(match);
          }
        });
      }
    });

    return entities;
  };

  // Rule-based sentiment analysis
  const analyzeSentiment = (text) => {
    const lowerText = text.toLowerCase();
    
    // Positive words
    const positiveWords = [
      'amazing', 'excellent', 'fantastic', 'great', 'love', 'perfect',
      'best', 'wonderful', 'awesome', 'outstanding', 'superb', 'incredible',
      'beautiful', 'comfortable', 'stunning', 'exceeded', 'gorgeous',
      'responsive', 'helpful', 'durable', 'professional', 'stylish'
    ];
    
    // Negative words
    const negativeWords = [
      'disappointed', 'terrible', 'awful', 'poor', 'bad', 'worst',
      'mediocre', 'hate', 'horrible', 'useless', 'waste', 'broken',
      'defective', 'overpriced', 'underpowered', 'flickered', 'not impressed'
    ];

    // Intensifiers
    const intensifiers = ['very', 'extremely', 'absolutely', 'really', 'super'];
    
    let positiveScore = 0;
    let negativeScore = 0;

    // Count positive words
    positiveWords.forEach(word => {
      const regex = new RegExp(`\\b${word}\\b`, 'gi');
      const matches = lowerText.match(regex);
      if (matches) {
        positiveScore += matches.length;
        
        // Check for intensifiers before positive words
        intensifiers.forEach(intensifier => {
          const intensifiedRegex = new RegExp(`\\b${intensifier}\\s+${word}\\b`, 'gi');
          if (intensifiedRegex.test(lowerText)) {
            positiveScore += 0.5;
          }
        });
      }
    });

    // Count negative words
    negativeWords.forEach(word => {
      const regex = new RegExp(`\\b${word}\\b`, 'gi');
      const matches = lowerText.match(regex);
      if (matches) {
        negativeScore += matches.length;
        
        // Check for intensifiers before negative words
        intensifiers.forEach(intensifier => {
          const intensifiedRegex = new RegExp(`\\b${intensifier}\\s+${word}\\b`, 'gi');
          if (intensifiedRegex.test(lowerText)) {
            negativeScore += 0.5;
          }
        });
      }
    });

    // Check for negation (e.g., "not good")
    const negationPattern = /\b(not|no|never|n't)\s+\w+/gi;
    const negations = lowerText.match(negationPattern);
    if (negations) {
      // Swap scores for negated phrases
      negativeScore += negations.length * 0.3;
    }

    const totalScore = positiveScore - negativeScore;
    
    return {
      sentiment: totalScore > 0 ? 'Positive' : totalScore < 0 ? 'Negative' : 'Neutral',
      score: totalScore,
      positiveScore,
      negativeScore,
      confidence: Math.min(Math.abs(totalScore) / 3, 1)
    };
  };

  // Process all reviews
  const results = sampleReviews.map((review, idx) => {
    const entities = extractEntities(review);
    const sentiment = analyzeSentiment(review);
    return {
      id: idx + 1,
      review,
      ...entities,
      ...sentiment
    };
  });

  // Aggregate statistics
  const sentimentCounts = results.reduce((acc, r) => {
    acc[r.sentiment] = (acc[r.sentiment] || 0) + 1;
    return acc;
  }, {});

  const brandCounts = results.reduce((acc, r) => {
    r.brands.forEach(brand => {
      acc[brand] = (acc[brand] || 0) + 1;
    });
    return acc;
  }, {});

  const sentimentData = Object.entries(sentimentCounts).map(([name, value]) => ({
    name,
    value
  }));

  const brandData = Object.entries(brandCounts)
    .sort((a, b) => b[1] - a[1])
    .slice(0, 10)
    .map(([name, count]) => ({ name, count }));

  const COLORS = {
    Positive: '#10b981',
    Negative: '#ef4444',
    Neutral: '#6b7280'
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
          <div className="flex items-center gap-3 mb-2">
            <Search className="w-8 h-8 text-indigo-600" />
            <h1 className="text-3xl font-bold text-gray-800">
              Amazon Reviews: NER & Sentiment Analysis
            </h1>
          </div>
          <p className="text-gray-600">
            Extract product names, brands, and analyze sentiment using rule-based NLP
          </p>
        </div>

        {/* Tabs */}
        <div className="bg-white rounded-lg shadow-lg mb-6">
          <div className="flex border-b">
            <button
              onClick={() => setActiveTab('analysis')}
              className={`flex-1 px-6 py-4 font-semibold ${
                activeTab === 'analysis'
                  ? 'text-indigo-600 border-b-2 border-indigo-600'
                  : 'text-gray-500 hover:text-gray-700'
              }`}
            >
              Detailed Analysis
            </button>
            <button
              onClick={() => setActiveTab('stats')}
              className={`flex-1 px-6 py-4 font-semibold ${
                activeTab === 'stats'
                  ? 'text-indigo-600 border-b-2 border-indigo-600'
                  : 'text-gray-500 hover:text-gray-700'
              }`}
            >
              Statistics & Charts
            </button>
            <button
              onClick={() => setActiveTab('code')}
              className={`flex-1 px-6 py-4 font-semibold ${
                activeTab === 'code'
                  ? 'text-indigo-600 border-b-2 border-indigo-600'
                  : 'text-gray-500 hover:text-gray-700'
              }`}
            >
              Code & Algorithm
            </button>
          </div>
        </div>

        {/* Content */}
        {activeTab === 'analysis' && (
          <div className="space-y-4">
            {results.map((result) => (
              <div key={result.id} className="bg-white rounded-lg shadow-md p-6 hover:shadow-xl transition-shadow">
                <div className="flex justify-between items-start mb-3">
                  <div className="flex items-center gap-2">
                    <span className="text-sm font-bold text-gray-500">Review #{result.id}</span>
                    <span className={`px-3 py-1 rounded-full text-sm font-semibold ${
                      result.sentiment === 'Positive' 
                        ? 'bg-green-100 text-green-800'
                        : result.sentiment === 'Negative'
                        ? 'bg-red-100 text-red-800'
                        : 'bg-gray-100 text-gray-800'
                    }`}>
                      {result.sentiment}
                    </span>
                  </div>
                  <div className="text-right">
                    <div className="text-xs text-gray-500">Confidence</div>
                    <div className="text-sm font-bold text-indigo-600">
                      {(result.confidence * 100).toFixed(0)}%
                    </div>
                  </div>
                </div>

                <p className="text-gray-700 mb-4 italic">"{result.review}"</p>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 pt-4 border-t">
                  <div>
                    <div className="flex items-center gap-2 mb-2">
                      <Tag className="w-4 h-4 text-blue-600" />
                      <span className="text-sm font-semibold text-gray-700">Brands</span>
                    </div>
                    <div className="flex flex-wrap gap-2">
                      {result.brands.length > 0 ? (
                        result.brands.map((brand, idx) => (
                          <span key={idx} className="px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs font-medium">
                            {brand}
                          </span>
                        ))
                      ) : (
                        <span className="text-xs text-gray-400">None detected</span>
                      )}
                    </div>
                  </div>

                  <div>
                    <div className="flex items-center gap-2 mb-2">
                      <Package className="w-4 h-4 text-purple-600" />
                      <span className="text-sm font-semibold text-gray-700">Products</span>
                    </div>
                    <div className="flex flex-wrap gap-2">
                      {result.products.length > 0 ? (
                        result.products.map((product, idx) => (
                          <span key={idx} className="px-2 py-1 bg-purple-100 text-purple-800 rounded text-xs font-medium">
                            {product}
                          </span>
                        ))
                      ) : (
                        <span className="text-xs text-gray-400">None detected</span>
                      )}
                    </div>
                  </div>

                  <div>
                    <div className="flex items-center gap-2 mb-2">
                      <TrendingUp className="w-4 h-4 text-green-600" />
                      <span className="text-sm font-semibold text-gray-700">Sentiment Score</span>
                    </div>
                    <div className="space-y-1">
                      <div className="flex justify-between text-xs">
                        <span className="text-green-600">Positive: {result.positiveScore.toFixed(1)}</span>
                        <span className="text-red-600">Negative: {result.negativeScore.toFixed(1)}</span>
                      </div>
                      <div className="text-sm font-bold text-gray-800">
                        Net Score: {result.score.toFixed(2)}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}

        {activeTab === 'stats' && (
          <div className="space-y-6">
            {/* Summary Cards */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div className="bg-white rounded-lg shadow-md p-6">
                <div className="text-sm text-gray-500 mb-1">Total Reviews</div>
                <div className="text-3xl font-bold text-indigo-600">{results.length}</div>
              </div>
              <div className="bg-white rounded-lg shadow-md p-6">
                <div className="text-sm text-gray-500 mb-1">Positive</div>
                <div className="text-3xl font-bold text-green-600">{sentimentCounts.Positive || 0}</div>
              </div>
              <div className="bg-white rounded-lg shadow-md p-6">
                <div className="text-sm text-gray-500 mb-1">Negative</div>
                <div className="text-3xl font-bold text-red-600">{sentimentCounts.Negative || 0}</div>
              </div>
              <div className="bg-white rounded-lg shadow-md p-6">
                <div className="text-sm text-gray-500 mb-1">Unique Brands</div>
                <div className="text-3xl font-bold text-purple-600">{Object.keys(brandCounts).length}</div>
              </div>
            </div>

            {/* Charts */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div className="bg-white rounded-lg shadow-md p-6">
                <h3 className="text-lg font-bold text-gray-800 mb-4">Sentiment Distribution</h3>
                <ResponsiveContainer width="100%" height={300}>
                  <PieChart>
                    <Pie
                      data={sentimentData}
                      cx="50%"
                      cy="50%"
                      labelLine={false}
                      label={({ name, value }) => `${name}: ${value}`}
                      outerRadius={100}
                      fill="#8884d8"
                      dataKey="value"
                    >
                      {sentimentData.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={COLORS[entry.name]} />
                      ))}
                    </Pie>
                    <Tooltip />
                  </PieChart>
                </ResponsiveContainer>
              </div>

              <div className="bg-white rounded-lg shadow-md p-6">
                <h3 className="text-lg font-bold text-gray-800 mb-4">Brand Mentions</h3>
                <ResponsiveContainer width="100%" height={300}>
                  <BarChart data={brandData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="name" angle={-45} textAnchor="end" height={100} />
                    <YAxis />
                    <Tooltip />
                    <Bar dataKey="count" fill="#6366f1" />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'code' && (
          <div className="bg-white rounded-lg shadow-md p-6">
            <h3 className="text-xl font-bold text-gray-800 mb-4">Algorithm Explanation</h3>
            
            <div className="space-y-6">
              <div>
                <h4 className="text-lg font-semibold text-indigo-600 mb-2">Named Entity Recognition (NER)</h4>
                <div className="bg-gray-50 p-4 rounded-lg">
                  <p className="text-sm text-gray-700 mb-2">
                    <strong>Brand Extraction:</strong> Uses predefined brand list with regex matching
                  </p>
                  <p className="text-sm text-gray-700 mb-2">
                    <strong>Product Extraction:</strong> Pattern matching for product names (e.g., Galaxy S21, AirPods Pro)
                  </p>
                  <p className="text-sm text-gray-700">
                    <strong>Method:</strong> Regular expressions with word boundaries to ensure accurate matches
                  </p>
                </div>
              </div>

              <div>
                <h4 className="text-lg font-semibold text-green-600 mb-2">Sentiment Analysis (Rule-Based)</h4>
                <div className="bg-gray-50 p-4 rounded-lg">
                  <p className="text-sm text-gray-700 mb-2">
                    <strong>Positive Words:</strong> amazing, excellent, fantastic, great, love, perfect, etc. ({20}+ words)
                  </p>
                  <p className="text-sm text-gray-700 mb-2">
                    <strong>Negative Words:</strong> disappointed, terrible, awful, poor, bad, mediocre, etc. ({20}+ words)
                  </p>
                  <p className="text-sm text-gray-700 mb-2">
                    <strong>Intensifiers:</strong> very, extremely, absolutely (add +0.5 to score)
                  </p>
                  <p className="text-sm text-gray-700 mb-2">
                    <strong>Negation Detection:</strong> "not", "no", "never" patterns (reverses sentiment)
                  </p>
                  <p className="text-sm text-gray-700">
                    <strong>Final Score:</strong> Net Score = Positive Score - Negative Score
                  </p>
                </div>
              </div>

              <div>
                <h4 className="text-lg font-semibold text-purple-600 mb-2">Key Features</h4>
                <ul className="list-disc list-inside space-y-2 text-sm text-gray-700 bg-gray-50 p-4 rounded-lg">
                  <li>Multi-word product name recognition (e.g., "Air Max", "Echo Dot")</li>
                  <li>Case-insensitive matching for robustness</li>
                  <li>Confidence scoring based on sentiment strength</li>
                  <li>Context-aware negation handling</li>
                  <li>Weighted scoring for intensified expressions</li>
                </ul>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default AmazonReviewAnalyzer;

# Import libraries
import spacy
from textblob import TextBlob

# Load English model for NER
nlp = spacy.load("en_core_web_sm")

# Sample Amazon product reviews
reviews = [
    "I absolutely love my new Samsung Galaxy S21! The camera quality is amazing.",
    "The Nike running shoes are very comfortable and lightweight.",
    "I am disappointed with the Apple AirPods, the battery life is terrible.",
    "The Lenovo laptop performs well but the screen brightness could be better.",
    "These Sony headphones have fantastic sound quality and noise cancellation."
]

# Process each review
for review in reviews:
    doc = nlp(review)

    # Extract entities related to product names or brands
    entities = [(ent.text, ent.label_) for ent in doc.ents if ent.label_ in ["ORG", "PRODUCT"]]

    # Perform rule-based sentiment analysis using TextBlob
    sentiment_score = TextBlob(review).sentiment.polarity
    sentiment = "Positive" if sentiment_score > 0 else "Negative" if sentiment_score < 0 else "Neutral"

    # Print results
    print(f"Review: {review}")
    print(f"Extracted Entities (Product/Brand): {entities}")
    print(f"Sentiment: {sentiment}")
    print("-" * 80)


---

✅ Expected Output

Review: I absolutely love my new Samsung Galaxy S21! The camera quality is amazing.
Extracted Entities (Product/Brand): [('Samsung', 'ORG')]
Sentiment: Positive
--------------------------------------------------------------------------------
Review: The Nike running shoes are very comfortable and lightweight.
Extracted Entities (Product/Brand): [('Nike', 'ORG')]
Sentiment: Positive
--------------------------------------------------------------------------------
Review: I am disappointed with the Apple AirPods, the battery life is terrible.
Extracted Entities (Product/Brand): [('Apple', 'ORG')]
Sentiment: Negative
--------------------------------------------------------------------------------
Review: The Lenovo laptop performs well but the screen brightness could be better.
Extracted Entities (Product/Brand): [('Lenovo', 'ORG')]
Sentiment: Neutral
--------------------------------------------------------------------------------
Review: These Sony headphones have fantastic sound quality and noise cancellation.
Extracted Entities (Product/Brand): [('Sony', 'ORG')]
Sentiment: Positive
--------------------------------------------------------------------------------
