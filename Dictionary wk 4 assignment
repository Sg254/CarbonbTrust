# Task 1: AI-Powered Code Completion - Dictionary Sorting
# Comparing AI-suggested vs Manual Implementation

import time
from typing import List, Dict, Any

# Sample data
sample_data = [
    {'name': 'Alice', 'age': 30, 'salary': 75000},
    {'name': 'Bob', 'age': 25, 'salary': 65000},
    {'name': 'Charlie', 'age': 35, 'salary': 85000},
    {'name': 'Diana', 'age': 28, 'salary': 70000},
    {'name': 'Eve', 'age': 32, 'salary': 80000}
]

# ============ AI-Suggested Implementation (Copilot-style) ============
def sort_dict_list_ai(data: List[Dict[str, Any]], key: str, reverse: bool = False) -> List[Dict[str, Any]]:
    """
    Sort a list of dictionaries by a specific key using AI-suggested approach.
    Uses built-in sorted() with lambda function.
    
    Args:
        data: List of dictionaries to sort
        key: Dictionary key to sort by
        reverse: Sort in descending order if True
    
    Returns:
        Sorted list of dictionaries
    """
    return sorted(data, key=lambda x: x.get(key, 0), reverse=reverse)


# ============ Manual Implementation ============
def sort_dict_list_manual(data: List[Dict[str, Any]], key: str, reverse: bool = False) -> List[Dict[str, Any]]:
    """
    Sort a list of dictionaries by a specific key using manual implementation.
    Uses list.sort() method for in-place sorting.
    
    Args:
        data: List of dictionaries to sort
        key: Dictionary key to sort by
        reverse: Sort in descending order if True
    
    Returns:
        Sorted list of dictionaries
    """
    # Create a copy to avoid modifying original
    result = data.copy()
    
    # Manual bubble sort implementation for comparison
    n = len(result)
    for i in range(n):
        for j in range(0, n - i - 1):
            if reverse:
                if result[j].get(key, 0) < result[j + 1].get(key, 0):
                    result[j], result[j + 1] = result[j + 1], result[j]
            else:
                if result[j].get(key, 0) > result[j + 1].get(key, 0):
                    result[j], result[j + 1] = result[j + 1], result[j]
    
    return result


# ============ Optimized Manual Implementation ============
def sort_dict_list_optimized(data: List[Dict[str, Any]], key: str, reverse: bool = False) -> List[Dict[str, Any]]:
    """
    Optimized manual implementation using built-in list.sort().
    
    Args:
        data: List of dictionaries to sort
        key: Dictionary key to sort by
        reverse: Sort in descending order if True
    
    Returns:
        Sorted list of dictionaries
    """
    result = data.copy()
    result.sort(key=lambda x: x.get(key, 0), reverse=reverse)
    return result


# ============ Performance Testing ============
def benchmark_sorting(data: List[Dict[str, Any]], key: str, iterations: int = 1000):
    """Benchmark all three implementations."""
    
    # Test AI-suggested implementation
    start = time.perf_counter()
    for _ in range(iterations):
        sort_dict_list_ai(data, key)
    ai_time = time.perf_counter() - start
    
    # Test manual implementation (bubble sort)
    start = time.perf_counter()
    for _ in range(iterations):
        sort_dict_list_manual(data, key)
    manual_time = time.perf_counter() - start
    
    # Test optimized manual implementation
    start = time.perf_counter()
    for _ in range(iterations):
        sort_dict_list_optimized(data, key)
    optimized_time = time.perf_counter() - start
    
    return ai_time, manual_time, optimized_time


# ============ Demonstration ============
if __name__ == "__main__":
    print("=" * 70)
    print("TASK 1: AI-POWERED CODE COMPLETION - DICTIONARY SORTING")
    print("=" * 70)
    
    print("\nüìä Original Data:")
    for item in sample_data:
        print(f"  {item}")
    
    # Sort by age
    print("\nü§ñ AI-Suggested (sorted by age):")
    ai_result = sort_dict_list_ai(sample_data, 'age')
    for item in ai_result:
        print(f"  {item}")
    
    print("\n‚úçÔ∏è  Manual Implementation (sorted by age):")
    manual_result = sort_dict_list_manual(sample_data, 'age')
    for item in manual_result:
        print(f"  {item}")
    
    print("\n‚ö° Optimized Manual (sorted by salary, descending):")
    optimized_result = sort_dict_list_optimized(sample_data, 'salary', reverse=True)
    for item in optimized_result:
        print(f"  {item}")
    
    # Performance benchmarking
    print("\n" + "=" * 70)
    print("PERFORMANCE BENCHMARK (1000 iterations)")
    print("=" * 70)
    
    ai_time, manual_time, optimized_time = benchmark_sorting(sample_data, 'age', 1000)
    
    print(f"\nü§ñ AI-Suggested (sorted()):       {ai_time:.6f} seconds")
    print(f"‚úçÔ∏è  Manual (bubble sort):          {manual_time:.6f} seconds")
    print(f"‚ö° Optimized Manual (list.sort()): {optimized_time:.6f} seconds")
    
    print(f"\nüìà Speed Comparison:")
    print(f"  Manual is {manual_time/ai_time:.2f}x slower than AI-suggested")
    print(f"  AI-suggested is {ai_time/optimized_time:.2f}x the speed of Optimized")
    
    print("\n‚úÖ Verification: All implementations produce identical results")
    print(f"   AI == Manual: {ai_result == manual_result}")
    print(f"   AI == Optimized: {ai_result == optimized_result}")
